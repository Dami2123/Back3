paths:
  /api/pets/:
    get:
      summary: Obtiene todas las mascotas registradas en la aplicación.
      tags:
        - Pets
      responses:
        "200":
          description: La operación fue exitosa, se retorna un arreglo con las mascotas registradas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: Se envió un dato no esperado.
        "500":
          description: Error inesperado del servidor, no se puede manejar el proceso.

    post:
      summary: Registra una nueva mascota.
      tags:
        - Pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createPet'
      responses:
        "201":
          description: Mascota registrada exitosamente.
        "400":
          description: Se envió un dato no esperado.
        "500":
          description: Error inesperado del servidor, no se puede manejar el proceso.

  /api/pets/withimage:
    post:
      summary: Registra una nueva mascota con imagen.
      tags:
        - Pets
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/requestBodies/createPetWithImage'
      responses:
        "201":
          description: Mascota registrada exitosamente con imagen.
        "400":
          description: Se envió un dato no esperado.
        "500":
          description: Error inesperado del servidor, no se puede manejar el proceso.

  /api/pets/{pid}:
    put:
      summary: Actualiza los datos de una mascota.
      tags:
        - Pets
      parameters:
        - name: pid
          in: path
          required: true
          description: ID de la mascota a actualizar.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updatePet'
      responses:
        "200":
          description: Mascota actualizada exitosamente.
        "400":
          description: Se envió un dato no esperado.
        "500":
          description: Error inesperado del servidor, no se puede manejar el proceso.

    delete:
      summary: Elimina una mascota por ID.
      tags:
        - Pets
      parameters:
        - name: pid
          in: path
          required: true
          description: ID de la mascota a eliminar.
          schema:
            type: string
      responses:
        "200":
          description: Mascota eliminada correctamente.
        "404":
          description: Mascota no encontrada.

components:
  schemas:
    Pet:
      type: object
      properties:
        _id:
          type: string
          description: ID autogenerado de Mongo.
        name:
          type: string
          description: Nombre de la mascota.
        specie:
          type: string
          description: Especie de la mascota.
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento de la mascota.
        adopted:
          type: boolean
          description: Indica si la mascota ha sido adoptada.
        owner:
          type: string
          description: ID del dueño de la mascota.
        image:
          type: string
          description: URL de la imagen de la mascota.
      example:
        _id: "647fa8c9e46dbc5a20320184"
        name: "Firulais"
        specie: "Perro"
        birthDate: "2020-05-15"
        adopted: false
        owner: "647fa8c9e46dbc5a20320185"
        image: "https://example.com/firulais.jpg"

  requestBodies:
    createPet:
      type: object
      properties:
        name:
          type: string
          description: Nombre de la mascota.
        specie:
          type: string
          description: Especie de la mascota.
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento de la mascota.
        adopted:
          type: boolean
          description: Indica si la mascota ha sido adoptada.
        owner:
          type: string
          description: ID del dueño de la mascota.
      example:
        name: "Luna"
        specie: "Gato"
        birthDate: "2021-08-10"
        adopted: true
        owner: "647fa8c9e46dbc5a20320186"

    createPetWithImage:
      type: object
      properties:
        pet:
          $ref: '#/components/schemas/Pet'
        image:
          type: string
          format: binary
      example:
        pet:
          name: "Rocky"
          specie: "Perro"
          birthDate: "2019-12-25"
          adopted: false
          owner: "647fa8c9e46dbc5a20320187"
        image: "(binary image data)"

    updatePet:
      type: object
      properties:
        name:
          type: string
          description: Nombre de la mascota.
        specie:
          type: string
          description: Especie de la mascota.
        birthDate:
          type: string
          format: date
          description: Fecha de nacimiento de la mascota.
        adopted:
          type: boolean
          description: Indica si la mascota ha sido adoptada.
      example:
        name: "Bobby"
        specie: "Conejo"
        birthDate: "2018-07-20"
        adopted: true
